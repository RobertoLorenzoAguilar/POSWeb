@model VentaViewModel

<div class=" card text-primary">
    <div class="card-header text-center">
        <h5>Editar Venta</h5>
    </div>
    <div class=" card-body text-primary">
        <div class="row">
            <div class="col-md-12">
                <form asp-action="Edit">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="IdVenta" />

                    <div class="form-group">
                        <label>Cliente RFC:</label>
                        <select id="IdCliente" class="form-control" asp-for="IdCliente">
                            <option value="">-- Seleccione Cliente --</option>
                        </select>
                        <span asp-validation-for="IdCliente" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label>Empleado Usuario:</label>
                        <select id="IdEmpleado" class="form-control" asp-for="IdEmpleado">
                            <option value="">-- Seleccione Empleado --</option>
                        </select>
                        <span asp-validation-for="IdEmpleado" class="text-danger"></span>
                    </div>

                    @*              <div class="form-group">
                    <label asp-for="IdSucursal">Seleccione una Sucursal:</label>
                    <select id="IdSucursal" class="form-control" asp-for="IdSucursal">
                    <option value="">-- Seleccione una Sucursal --</option>
                    </select>
                    <span asp-validation-for="IdSucursal" class="text-danger"></span>
                    </div> *@

                    <div class="form-group">
                        <label>Tipo Venta:</label>
                        <select id="selectTipoVenta" class="form-control" asp-for="TipoVenta">
                            <option value="">-- Seleccione Tipo Venta --</option>
                            <option value="contado">Contado</option>
                            <option value="credito">Crédito</option>
                        </select>
                        <span asp-validation-for="TipoVenta" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label>Sucursal Nombre (Asignada al Empleado):</label>
                        <input readonly id="IdSucursal" class="form-control" placeholder="">
                    </div>

                    @* detalle producto *@
                    <div class="form-group">
                        <label>Agregar Servicio o Producto:</label>
                        <div class="input-group" id="servicioProductoHidden">
                            <input id="servicioProducto" class="form-control" placeholder="">
                            <div class="input-group-append">
                                <button type="button" id="btnAgregarProducto" class="btn btn-primary">Agregar</button>
                            </div>
                        </div>
                    </div>

                    <div class="container">
                        <label></label>
                        <div class="row">
                            <table id="tblDetalleVenta" class="table table-striped table-bordered" style="width:100%">
                                <thead>
                                    <tr>
                                        <th>Folio</th>
                                        <th>Nombre</th>
                                        <th>Descripcion </th>
                                        <th>Precio Unitario</th>
                                        <th>Cantidad</th>
                                        <th>Retención</th>
                                        <th>Traslado</th>
                                        <th>Subtotal</th>
                                        <th class="Total">Total</th>
                                        <th>Eliminar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    @* !-- Agrega los campos para mostrar los totales --> *@
                    <div class="container">
                        <div class="row mt-3">
                            <div class="col-6 offset-md-6 text-right">
                                <label for="subtotal">Subtotal:</label>
                                <br />
                                <label> (Sumatoria Por Producto sin impuesto aplicado):</label>
                                <input type="text" class="form-control form-control-sm" id="subtotal" readonly>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-6 offset-md-6 text-right">
                                <label for="descuentos">Descuentos:</label>
                                <input type="text" class="form-control form-control-sm" id="descuentos" readonly>
                            </div>
                        </div>

                        <div class="row mt-3" style="margin-bottom:5px;">
                            <div class="col-6 offset-md-6 text-right">
                                <label for="total">Total:</label>
                                <label>(Sumatoria Por Producto con impuesto aplicado menos el descuento del cliente)</label>
                                <input asp-for="TotalVenta" type="text" class="form-control form-control-sm" id="totalVenta" readonly>
                            </div>
                        </div>
                    </div>
                    <div class=" card-footer text-center">
                        <div class="form-group">
                            <input type="submit" value="Guardar" class="btn btn-outline-primary btn-sm" />
                            <a asp-action="Index" class="btn btn-outline-success btn-sm">Volver a la lista</a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>


@section Scripts {
    @* el Orden es eimportante *@
    <link href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" rel="Stylesheet">
    <script src='https://cdn.rawgit.com/pguso/jquery-plugin-circliful/master/js/jquery.circliful.min.js'></script>
    <script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>

    <!-- Incluir jQuery desde CDN -->
    @* <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> *@

    <!-- Incluir jQuery DataTables desde CDN -->
    <link href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" rel="stylesheet">
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>

    <!-- Incluir jQuery DataTables desde CDN Iconos -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.1/css/all.css" crossorigin="anonymous">

    <script>
        $(document).ready(function () {

            // Función genérica para cargar opciones en un selector
            function cargarOpciones(url, selector, optionText) {
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        // Limpiar opciones actuales del selector
                        $(selector).empty();
                        // Agregar opción inicial
                        $(selector).append($('<option>').text('-- Seleccione ' + optionText + ' --').attr('value', ''));
                        if (selector == '#IdSucursal') {
                            $(selector).val(data.nombreSucursal);


                        } else if (selector == '#IdEmpleado') {
                            $.each(data, function (index, item) {
                                $(selector).append($('<option>').text(item.usuarioSistema).attr('value', item.idEmpleado));
                            });

                            //seteo de valores
                            // Obtener el valor de IdEmpresa desde el modelo
                            var IdEmpleadoValue = '@Model.IdEmpleado'; // Obtener el valor del modelo en Razor

                            // Seleccionar automáticamente la opción correspondiente en el select
                            $('#IdEmpleado').val(IdEmpleadoValue);


                        } else if (selector == '#IdCliente') {
                            $.each(data, function (index, item) {
                                $(selector).append($('<option>').text(item.rfcCliente)
                                    .attr('value', item.idCliente)
                                    .attr('data-descuento', item.descuento));
                            });
                            // Obtener el valor de IdEmpresa desde el modelo
                            var IdClienteValue = '@Model.IdCliente'; // Obtener el valor del modelo en Razor

                            // Seleccionar automáticamente la opción correspondiente en el select
                            $('#IdCliente').val(IdClienteValue);


                            cargarDescuentoCliente();
                        }
                    },
                    error: function () {
                        console.error('Error al cargar ' + optionText.toLowerCase() + '.');
                    }
                });
            }

            // Cargar empleados (tipo Asesor de Venta)
            cargarOpciones('http://localhost:5014/Empleados', '#IdEmpleado', 'Empleado');

            // Cargar clientes
            cargarOpciones('http://localhost:5014/Clientes', '#IdCliente', 'Cliente');


            // cargar sucursal empleado
            var IdEmpleadoValue = '@Model.IdEmpleado'; // Obtener el valor del modelo en Razor

            // Seleccionar automáticamente la opción correspondiente en el select
            $('#IdEmpleado').val(IdEmpleadoValue);

            let url = `http://localhost:5014/Empleado/getEmpleadoById?IdEmpleado=${IdEmpleadoValue}`;
            cargarOpciones(url, '#IdSucursal', 'una Sucursal');


            //cargar tabla

            var dataTable = $('#tblDetalleVenta').DataTable({
                columns: [
                    { data: 'Folio' },
                    { data: 'Nombre' },
                    { data: 'Descripcion' },
                    { data: 'PrecioUnitario' },
                    {
                        data: 'Cantidad',
                        title: 'Cantidad',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                // Mostrar un campo numérico y un botón para ajustar la cantidad
                                return '<div class="input-group">' +
                                    '<input type="number" id="txtCantidad" class="form-control txtCantidad" value="' + data + '" />' +
                                    '</div>';
                            } else {
                                // En otras situaciones, devolver solo el valor de la cantidad
                                return data;
                            }
                        }
                    },
                    { data: 'Retencion' }, // ISR
                    { data: 'Traslado' },  // IVA
                    { data: 'Subtotal' },
                    { data: 'Total' },
                    {
                        data: 'Eliminar',
                        title: 'Eliminar',
                        "render": function (data, type, row) {
                            // Renderizar los botones en la columna "Acciones"
                            return `<button class="eliminarBtn" data-id="${row.idProducto}"><i class="fa fa-trash-alt"></i></button> `;
                        }
                    }

                ]
            });

            //funcionalidad Autocompletado
            $("#servicioProducto").autocomplete({
                source: function (request, response) {
                    // Realiza una llamada a tu API para obtener resultados
                    $.ajax({
                        url: 'http://localhost:5014/Productos/buscar',
                        dataType: 'json',
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            var parsedData = [];

                            // Itera sobre los datos para construir las sugerencias
                            $.each(data, function (index, item) {
                                parsedData.push({
                                    label: item.nombreProducto, // Texto visible en las sugerencias
                                    value: item.idProducto, // Valor mostrado en el campo de entrada
                                    id: item.id // Valor oculto asociado al elemento
                                });
                            });

                            response(parsedData); // Devuelve los datos parseados para Autocomplete
                        }
                    });
                },
                minLength: 2, // Número mínimo de caracteres antes de mostrar sugerencias
                select: function (event, ui) {
                    $("#servicioProducto").val(ui.item.label); // Establece el valor visible en el campo de entrada
                    $("#servicioProductoHidden").val(ui.item.value); // Establece el valor oculto en el campo oculto
                    // Asegúrate de que 'return false;' esté deteniendo la propagación del evento si es necesario
                    return false;
                }
            });

            // funcionalidad agregar productos a la tabla de a // Manejar el evento clic del botón "Agregar Producto"
            $("#btnAgregarProducto").click(function () {
                // Obtener el valor del campo oculto (ID del producto)
                var idProducto = $("#servicioProductoHidden").val();
                //     // Hacer algo con el ID del producto, por ejemplo, enviarlo a través de AJAX
                agregarProductoServicioTabla(idProducto);
            });

            function agregarProductoServicioTabla(idProducto, cantidadEdit = 1) {
                if (idProducto) {
                    // Realizar una solicitud AJAX para agregar el producto con el ID
                    $.ajax({
                        url: `http://localhost:5014/Producto/getProductoById?IdProducto=${idProducto}`,
                        method: 'GET',
                        data: {
                            idProducto: idProducto
                            // Puedes incluir más datos del formulario si es necesario
                        },
                        success: function (response) {
                            // Manejar la respuesta del servidor si es necesario
                            console.log("Producto agregado exitosamente:", response);
                            // Puedes realizar más acciones después de agregar el producto
                            // Obtener los valores del producto seleccionado
                            var idProducto = $('#servicioProductoHidden').val();
                            var folio = response.folioProducto;
                            var nombreProducto = response.nombreProducto;
                            var descProd = response.descripcionProducto;
                            var precioUnitario = response.tblProductoSucursals[0].precio;
                            let cantidad = cantidadEdit;
                            var retencion = response.retencion;
                            var traslado = response.traslado;
                            var subtotal = 0;
                            var total = 0;

                            var totalCalculado = 0;
                            //calculo fila total
                            if (retencion == true) {
                                impuesto = .30; // ISR rentencion
                                totalSinImpuesto = (precioUnitario * cantidad)
                                impuesto = totalSinImpuesto * impuesto;
                                totalCalculado = totalSinImpuesto + impuesto;                                
                                traslado = "N/A";
                                retencion = "30%";
                            } else if (traslado == true) {
                                impuesto = .16; // IVA rentencion
                                totalSinImpuesto = (precioUnitario * cantidad)
                                impuesto = totalSinImpuesto * impuesto;
                                totalCalculado = totalSinImpuesto + impuesto;
                                retencion = "N/A";
                                traslado = "16%";
                            }

                            // Crear un objeto con los datos del nuevo elemento a agregar al DataTable
                            var newData = {
                                idProducto: idProducto,
                                Folio: folio,
                                Nombre: nombreProducto,
                                Descripcion: descProd,
                                PrecioUnitario: precioUnitario,
                                Cantidad: cantidad,
                                Retencion: retencion,
                                Traslado: traslado,
                                Subtotal: cantidad * precioUnitario,
                                Total: totalCalculado
                            };

                            // Agregar la nueva fila al DataTable
                            var table = $('#tblDetalleVenta').DataTable();
                            table.row.add(newData).draw(); // Agregar la fila y volver a dibujar el DataTable

                            // Limpiar los campos de entrada después de agregar el producto
                            $('#servicioProducto').val('');
                            $('#servicioProductoHidden').val('');
                            calcularSumaTotal(); //calcular total
                        },
                        error: function (xhr, status, error) {
                            // Manejar errores de la solicitud AJAX si ocurren
                            console.error("Error al agregar producto:", error);
                        }
                    });
                } else {
                    console.log("No se ha seleccionado ningún producto.");
                    // Puedes mostrar un mensaje de error o realizar otras acciones si no se seleccionó ningún producto
                }
            }
            //evento para agregar a la tabla los prodctos
            function cargarProductos() {
                var lstProductos = @Html.Raw(Json.Serialize(Model.LstProducto));// obtenemos el listado de productos cantidad
                lstProductos.forEach(function (producto) {
                    console.log(producto);
                    agregarProductoServicioTabla(producto.idProducto, producto.cantidad);
                });
            }
            cargarProductos();

            // cargar el descuento del cliente
            $('#IdCliente').change(function () {
                cargarDescuentoCliente();
            });

            //cada vez que el cliente cambia se renueva el tipo de descuento
            function cargarDescuentoCliente() {
                // Obtener el descuento del cliente seleccionado
                // Obtener la opción seleccionada
                let selectedOption = $("#IdCliente").find('option:selected');
                let descuento = selectedOption.data('descuento');
                $("#descuentos").val(descuento);;

            }

            // Función para calcular la suma de la columna "Total"
            function calcularSumaTotal() {
                var tabla = document.getElementById('tblDetalleVenta');

                // Obtener todas las filas de la tabla (excluyendo la fila de encabezado)
                var filas = tabla.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

                let subTotalPagoVenta = 0; //total por articulo
                let TotalPagoVenta = 0; //total por articulo

                // Iterar sobre cada fila de la tabla
                Array.from(filas).forEach(function (fila) {
                    var celdas = fila.getElementsByTagName('td');
                    const cantidadElemento = celdas[4].querySelector('div.input-group .txtCantidad').value;
                    // var total = parseFloat(celdas[3].textContent) * cantidadElemento;
                    var subtotal = parseFloat(celdas[3].textContent) * cantidadElemento; // Columna de total
                    subTotalPagoVenta = subTotalPagoVenta + subtotal;
                    var total = parseFloat(celdas[8].textContent); // Columna de total
                    TotalPagoVenta = TotalPagoVenta + total;
                });

                var descuento = $("#descuentos").val();
                $("#subtotal").val(subTotalPagoVenta);
                // $("#totalVenta").val(TotalPagoVenta - descuentos);
                $("#totalVenta").val(TotalPagoVenta - descuento);
            }

            // Manejar el cambio de cantidad
            $(document).on('change', '#txtCantidad', function () {
                var cantidad = $(this).val();
                if (!isNaN(cantidad) && cantidad !== '') {
                    var cantidadParseada = parseInt(cantidad, 10);
                    if (!isNaN(cantidadParseada)) {
                        var $fila = $(this).closest('tr');
                        var indiceFila = dataTable.row($fila).index();
                        var datosFila = dataTable.row(indiceFila).data();
                        datosFila.Cantidad = cantidadParseada;
                        datosFila.Subtotal = datosFila.PrecioUnitario * cantidadParseada;
                        // calculo retencion tralsado
                        var totalCalculado = 0;
                        //calculo fila total
                        if (datosFila.Retencion != "N/A") {
                            var impuesto = (datosFila.PrecioUnitario * datosFila.Cantidad) * .30;
                            totalCalculado = impuesto + (datosFila.PrecioUnitario * datosFila.Cantidad); //isr traslado
                        } else if (datosFila.Traslasado != "N/A") {
                            var impuesto = (datosFila.PrecioUnitario * datosFila.Cantidad) * .16;
                            totalCalculado = impuesto + (datosFila.PrecioUnitario * datosFila.Cantidad); //isr traslado
                        }
                        datosFila.Total = totalCalculado;  //retencion o traslado
                        dataTable.row(indiceFila).data(datosFila).invalidate();
                        calcularSumaTotal(); //recalcular
                    } else {
                        alert("Por favor, introduce un número válido.");
                    }
                } else {
                    alert("Por favor, introduce un número válido.");
                }
            });

        });
    </script>
}






